{
  "name": "Visitor Intelligence Agent - Demo",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "visitor-intel",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "webhookId": "visitor-intel-webhook"
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "language": "javaScript",
        "jsCode": "// Extract webhook data\nconst data = $input.first().json.body;\n\n// Validate input\nif (!data || !data.url) {\n  return [{\n    json: {\n      error: \"Missing required field: url\",\n      score: 0,\n      category: \"Invalid\"\n    }\n  }];\n}\n\n// Calculate time score (1pt per 10 seconds, max 30)\nconst timeScore = Math.min(Math.floor((data.timeOnPage || 0) / 10), 30);\n\n// Calculate page score (5pts per page, max 25)\nconst pageScore = Math.min((data.pagesViewed || 1) * 5, 25);\n\n// High-value page bonus\nconst highValuePage = /pricing|demo|contact|enterprise|solutions/.test(data.url.toLowerCase()) ? 20 : 0;\n\n// Total score calculation\nconst totalScore = 10 + timeScore + pageScore + highValuePage;\n\n// Categorize lead\nlet category, action;\nif (totalScore < 30) {\n  category = \"Cold\";\n  action = \"monitor\";\n} else if (totalScore < 60) {\n  category = \"Warm\";\n  action = \"engage_email\";\n} else {\n  category = \"Hot\";\n  action = \"trigger_chat\";\n}\n\n// Return enriched data\nreturn [{\n  json: {\n    url: data.url,\n    timeOnPage: data.timeOnPage || 0,\n    pagesViewed: data.pagesViewed || 1,\n    device: data.device || \"unknown\",\n    referrer: data.referrer || \"direct\",\n    score: totalScore,\n    category: category,\n    action: action,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "calculate-score",
      "name": "Calculate Lead Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "Claude 3.5 Haiku(20241022)"
        },
        "options": {
          "maxTokens": 150,
          "temperature": 0.3
        },
        "text": "=Analyze this visitor behavior and provide ONE concise sentence describing their intent level:\n\n**Visitor Data:**\n- Page: {{ $json.url }}\n- Time on page: {{ $json.timeOnPage }} seconds\n- Total pages viewed: {{ $json.pagesViewed }}\n- Device: {{ $json.device }}\n- Referrer: {{ $json.referrer }}\n- Lead Score: {{ $json.score }}/85 ({{ $json.category }})\n\nProvide a specific, actionable insight about their buying intent. Be direct and helpful."
      },
      "id": "ai-insights",
      "name": "AI Behavioral Insights",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [680, 300],
      "credentials": {
        "anthropicApi": {
          "id": "anthropic-credentials",
          "name": "Anthropic API"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final_response",
              "name": "response",
              "value": "={{ {\n  success: true,\n  visitor: {\n    url: $('Calculate Lead Score').item.json.url,\n    timeOnPage: $('Calculate Lead Score').item.json.timeOnPage,\n    pagesViewed: $('Calculate Lead Score').item.json.pagesViewed,\n    device: $('Calculate Lead Score').item.json.device,\n    referrer: $('Calculate Lead Score').item.json.referrer\n  },\n  intelligence: {\n    score: $('Calculate Lead Score').item.json.score,\n    category: $('Calculate Lead Score').item.json.category,\n    action: $('Calculate Lead Score').item.json.action,\n    insight: $json.response || 'Analysis complete'\n  },\n  timestamp: $('Calculate Lead Score').item.json.timestamp\n} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-response",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.response }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Calculate Lead Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Lead Score": {
      "main": [
        [
          {
            "node": "AI Behavioral Insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Behavioral Insights": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "demo-agent",
      "name": "Demo Agent"
    },
    {
      "id": "visitor-intelligence",
      "name": "Visitor Intelligence"
    }
  ]
}
